#!/usr/bin/env node
/* eslint-disable no-console */
const fs = require('fs');
const path = require('path');

const rootDir = path.join(__dirname, '..');
const srcDir = path.join(rootDir, 'src');
const dataDir = path.join(srcDir, 'data');
const genDir = path.join(srcDir, 'generated');

function readJson(file) {
  return JSON.parse(fs.readFileSync(path.join(dataDir, file), 'utf8'));
}

function toRecordLiteral(obj) {
  const keys = Object.keys(obj).sort();
  const pairs = keys.map((k) => `  ${JSON.stringify(k)}: ${JSON.stringify(obj[k])}`);
  return `{
${pairs.join(',\n')}
}`;
}

function toRecordArrayLiteral(obj) {
  const keys = Object.keys(obj).sort();
  const pairs = keys.map((k) => `  ${JSON.stringify(k)}: ${JSON.stringify(obj[k])}`);
  return `{
${pairs.join(',\n')}
}`;
}

function main() {
  const countries = readJson('countries.json');
  const dials = readJson('country-dials.json');
  const languages = readJson('languages.json');
  const locales = readJson('locales.json');
  const timeZones = readJson('time-zones.json');
  const currencies = readJson('currencies.json');
  const usStates = readJson('us-states.json');

  const countryByISO2 = {};
  const countryByISO3 = {};
  for (const c of countries) {
    countryByISO2[c.iso2] = c;
    countryByISO3[c.iso3] = c;
  }

  const dialByISO2 = {};
  const countriesByDial = {};
  for (const d of dials) {
    dialByISO2[d.iso2] = d;
    const list = countriesByDial[d.dialCode] || (countriesByDial[d.dialCode] = []);
    const country = countryByISO2[d.iso2];
    if (country) list.push(country);
  }

  const languageBy639_1 = {};
  const languageBy639_2 = {};
  for (const l of languages) {
    if (l.iso639_1) languageBy639_1[l.iso639_1] = l;
    languageBy639_2[l.iso639_2] = l;
  }

  const localeByTag = {};
  const localesByLanguage = {};
  for (const loc of locales) {
    localeByTag[loc.tag] = loc;
    const list = localesByLanguage[loc.language] || (localesByLanguage[loc.language] = []);
    list.push(loc);
  }

  const timeZoneByName = {};
  for (const tz of timeZones) {
    timeZoneByName[tz.name] = tz;
  }

  const currencyByCode = {};
  for (const cur of currencies) {
    currencyByCode[cur.code] = cur;
  }

  const usStateByCode = {};
  for (const s of usStates) {
    usStateByCode[s.code] = s;
  }

  const header = `/* AUTO-GENERATED FILE. DO NOT EDIT. */\n` +
    `/* Generated by scripts/generate-maps.cjs */\n` +
    `import { Country, CountryDial, Language, Locale, TimeZone, Currency, USState } from '../types';\n\n`;

  const body = [
    `export const countryByISO2: Record<string, Country> = ${toRecordLiteral(countryByISO2)};`,
    `export const countryByISO3: Record<string, Country> = ${toRecordLiteral(countryByISO3)};`,
    `export const dialByISO2: Record<string, CountryDial> = ${toRecordLiteral(dialByISO2)};`,
    `export const countriesByDial: Record<string, Country[]> = ${toRecordArrayLiteral(countriesByDial)};`,
    `export const languageBy639_1: Record<string, Language> = ${toRecordLiteral(languageBy639_1)};`,
    `export const languageBy639_2: Record<string, Language> = ${toRecordLiteral(languageBy639_2)};`,
    `export const localeByTag: Record<string, Locale> = ${toRecordLiteral(localeByTag)};`,
    `export const localesByLanguage: Record<string, Locale[]> = ${toRecordArrayLiteral(localesByLanguage)};`,
    `export const timeZoneByName: Record<string, TimeZone> = ${toRecordLiteral(timeZoneByName)};`,
    `export const currencyByCode: Record<string, Currency> = ${toRecordLiteral(currencyByCode)};`,
    `export const usStateByCode: Record<string, USState> = ${toRecordLiteral(usStateByCode)};`
  ].join('\n\n');

  fs.mkdirSync(genDir, { recursive: true });
  fs.writeFileSync(path.join(genDir, 'maps.ts'), header + body + '\n');
  console.log('Generated src/generated/maps.ts');
}

main();
